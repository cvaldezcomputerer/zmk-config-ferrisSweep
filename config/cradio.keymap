// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&gresc {
    bindings = <&kp A>, <&kp TAB>;

    mods = <(MOD_LGUI)>;
};

/ {
    // We are no longer defining a 'mt' behavior node here,
    // as it seems to conflict with ZMK's default 'mod_tap' behavior.
    // Instead, we will rely on ZMK's predefined 'mod-tap' and adjust its properties
    // through a separate overlay if necessary, or in the build system.

    behaviors {
        // Only other behaviors should be here if you have any.
        // If you only had the 'mt' behavior defined here, this block can be empty.

        HMLEFT: HMLEFT {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 25 26 27 28 29 33 32 31 30>;
        };

        HMRIGHT: HMRIGHT {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <33 32 31 30 0 10 21 11 20 1 3 12 22 13 23 14 4 2 24>;
        };

        A_Tab: A_Tab {
            compatible = "zmk,behavior-mod-morph";
            label = "A_TAB";
            bindings = <&kp A>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <13 16>;
            require-prior-idle-ms = <150>;
        };

        brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        Rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <28 27>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <25 15>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <26 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        carrot {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
            require-prior-idle-ms = <150>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <16 6>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <7 17>;
            require-prior-idle-ms = <150>;
        };

        leftparn {
            bindings = <&kp LPAR>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
        };

        rightparent {
            bindings = <&kp RPAR>;
            key-positions = <17 18>;
            require-prior-idle-ms = <150>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 9>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E                 &kp R               &kp T        &kp Y    &kp U                 &kp I                   &kp O    &kp P
&kp A  &kp S  &HMLEFT LEFT_SHIFT D  &HMLEFT LEFT_GUI F  &kp G        &kp H    &HMRIGHT RIGHT_GUI J  &HMRIGHT RIGHT_SHIFT K  &kp L    &kp APOS
&kp Z  &kp X  &kp C                 &kp V               &kp B        &kp N    &kp M                 &kp COMMA               &kp DOT  &mt RIGHT_SHIFT FSLH
                                    &lt 1 LA(TAB)       &kp SPACE    &kp RET  &kp BACKSPACE
            >;
        };

        right_layer {
            bindings = <
&bootloader   &kp N1        &kp NUMBER_2  &kp N3        &trans    &kp HOME      &kp PG_DN  &kp PG_UP  &kp END  &bootloader
&kp NUMBER_1  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N5    &kp NUMBER_6  &kp N7     &kp N8     &kp N9   &kp N0
&kp N0        &kp N7        &kp N8        &kp N9        &kp N0    &trans        &trans     &trans     &trans   &trans
                                          &trans        &mo 2     &trans        &trans
            >;
        };

        left_layer {
            bindings = <
&trans    &kp LBKT  &kp LBRC  &kp RBRC  &trans       &kp CARET  &kp LPAR       &kp RPAR      &kp RBKT              &kp TILDE
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans    &trans    &trans    &trans    &trans       &kp AMPS   &kp UNDER      &kp PLUS      &kp PIPE              &trans
                              &trans    &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
